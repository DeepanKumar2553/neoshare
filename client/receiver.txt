// Receiver.tsx (overwrite your existing Receiver component with this)
import { useSocket } from "@/hooks/useSocket";
import { showError } from "@/hooks/useToast";
import { revokeReceiverAccess } from "@/store/accessSlice";
import { useAppDispatch } from "@/store/hooks";
import { triggerReconnect } from "@/store/socketSlice";
import { Frame } from "@/ui/frame";
import { useEffect, useRef, useState } from "react";
import { FiWifi } from "react-icons/fi";
import { useNavigate } from "react-router-dom";
import { twMerge } from "tailwind-merge";

export default function Receiver() {
  const dispatch = useAppDispatch();
  const { socket } = useSocket();
  const navigate = useNavigate();

  const pcRef = useRef<RTCPeerConnection | null>(null);
  const [dcOpen, setDcOpen] = useState(false);
  // map fileId -> {chunks: Uint8Array[], receivedBytes, name, size, mime}
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const filesRef = useRef<Map<string, any>>(new Map());
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const remoteIceQueueRef = useRef<any[]>([]);

  useEffect(() => {
    console.log("Receiver page mounted");

    const handleRoomDestroyed = (data:{title:string,description?:string}) => {
      navigate('/enter', { replace: true });
      showError(data.title,data.description)
    };
    
    if (socket) {
      socket.on("room-destroyed", handleRoomDestroyed);
    }
    
    return () => {
      console.log("Receiver page unmounted");

      if (socket && socket.connected) {
        socket.emit("leave-room");
      }
      
      if (socket) {
        socket.off("room-destroyed", handleRoomDestroyed);
      }

      dispatch(triggerReconnect())
      dispatch(revokeReceiverAccess());
    }
  }, [dispatch, socket ,navigate]);

  // WebRTC setup
  useEffect(() => {
    if (!socket) return;

    const pc = new RTCPeerConnection({
      iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
    });
    pcRef.current = pc;

    pc.ondatachannel = (ev) => {
      const dc = ev.channel;
      console.log("Receiver datachannel:", dc.label);

      dc.onopen = () => {
        console.log("Receiver DataChannel open");
        setDcOpen(true);
      };
      dc.onclose = () => {
        console.log("Receiver DataChannel closed");
        setDcOpen(false);
      };

      dc.onmessage = (ev) => {
        // either control text or binary with header
        if (typeof ev.data === "string") {
          let msg;
          try { msg = JSON.parse(ev.data); } catch (e) {
            console.log(e)
            return;
          }
          if (msg.type === "file-offer") {
            filesRef.current.set(msg.id, {
              id: msg.id,
              name: msg.name,
              size: msg.size,
              mime: msg.mime,
              chunks: [],
              receivedBytes: 0,
              totalChunks: msg.totalChunks
            });
            console.log("Incoming file offer:", msg.name, msg.size);
            // optionally notify UI / ask user to accept; here we auto-accept
          } else if (msg.type === "file-end") {
            const f = filesRef.current.get(msg.id);
            if (f) {
              const blob = new Blob(f.chunks, { type: f.mime });
              const url = URL.createObjectURL(blob);
              const a = document.createElement("a");
              a.href = url;
              a.download = f.name;
              a.click();
              URL.revokeObjectURL(url);
              filesRef.current.delete(msg.id);
              console.log("File saved:", f.name);
            }
          }
        } else {
          // binary: header\npayload pattern
          const data = new Uint8Array(ev.data);
          // find newline separator
          let sep = -1;
          for (let i = 0; i < Math.min(512, data.length); i++) {
            if (data[i] === 10) { sep = i; break; }
          }
          if (sep <= 0) return;
          const headerBytes = data.slice(0, sep);
          const decoder = new TextDecoder();
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          let header: any;
          try { header = JSON.parse(decoder.decode(headerBytes)); } catch (e) {
            console.log(e)
            return;
          }
          const payload = data.slice(sep + 1);
          const f = filesRef.current.get(header.id);
          if (!f) {
            console.warn("Unknown file chunk id", header.id);
            return;
          }
          f.chunks.push(payload);
          f.receivedBytes += payload.length;

          // if reached declared size, finalize
          if (f.receivedBytes >= f.size) {
            const blob = new Blob(f.chunks, { type: f.mime });
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = f.name;
            a.click();
            URL.revokeObjectURL(url);
            filesRef.current.delete(header.id);
            console.log("File received (size reached):", f.name);
          }
        }
      };
    };

    // ICE handling: send our ICE to server
    pc.onicecandidate = (ev) => {
      if (ev.candidate) {
        socket.emit("signal", { type: "ice", candidate: ev.candidate });
      }
    };

    // handler for incoming signaling messages
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const handleSignal = async (payload: any) => {
      if (!pcRef.current) return;
      if (!payload || typeof payload !== "object") return;

      if (payload.type === "offer") {
        try {
          // set remote (offer)
          await pcRef.current.setRemoteDescription({ type: "offer", sdp: payload.sdp });

          // flush queued ice
          while (remoteIceQueueRef.current.length) {
            const c = remoteIceQueueRef.current.shift();
            if (c) pcRef.current.addIceCandidate(new RTCIceCandidate(c)).catch(() => {});
          }

          const answer = await pcRef.current.createAnswer();
          await pcRef.current.setLocalDescription(answer);
          socket.emit("signal", { type: "answer", sdp: pcRef.current.localDescription?.sdp });
        } catch (err) {
          console.error("failed to handle offer:", err);
        }
      } else if (payload.type === "ice") {
        const remoteDesc = pcRef.current.remoteDescription;
        if (!remoteDesc || !remoteDesc.type) {
          remoteIceQueueRef.current.push(payload.candidate);
        } else {
          pcRef.current.addIceCandidate(new RTCIceCandidate(payload.candidate)).catch((e) => {
            console.warn("addIceCandidate error on receiver:", e);
          });
        }
      } else {
        console.log("Receiver unknown signal type:", payload.type);
      }
    };

    socket.on("signal", handleSignal);

    return () => {
      socket.off("signal", handleSignal);
      try { pcRef.current?.close(); } catch (e) {
        console.log(e)
      }
      pcRef.current = null;
    };
  }, [socket]);

  return (
    <div className="receiver-container">
      <div
        className={twMerge([
          "relative size-100 flex items-center justify-center",
          "[--color-frame-1-stroke:var(--color-primary)]/50",
          "[--color-frame-1-fill:var(--color-primary)]/20",
          "[--color-frame-2-stroke:var(--color-accent)]",
          "[--color-frame-2-fill:var(--color-accent)]/20",
          "[--color-frame-3-stroke:var(--color-accent)]",
          "[--color-frame-3-fill:var(--color-accent)]/20",
          "[--color-frame-4-stroke:var(--color-accent)]",
          "[--color-frame-4-fill:var(--color-accent)]/20",
          "[--color-frame-5-stroke:var(--color-primary)]/23",
          "[--color-frame-5-fill:transparent]",
          "frame-container"
        ])}
      >
        <Frame
          className="drop-shadow-2xl drop-shadow-primary/50"
          paths={JSON.parse(
            '[{"show":true,"style":{"strokeWidth":"1","stroke":"var(--color-frame-1-stroke)","fill":"var(--color-frame-1-fill)"},"path":[["M","37","12"],["L","0% + 59","12"],["L","0% + 85","0% + 33"],["L","79","0% + 12"],["L","50% - 3","12"],["L","50% + 16","30"],["L","100% - 35","30"],["L","100% - 16","47"],["L","100% - 16","100% - 47.05882352941177%"],["L","100% - 8","100% - 44.85294117647059%"],["L","100% - 9","100% - 16.666666666666668%"],["L","100% - 17","100% - 14.705882352941176%"],["L","100% - 17","100% - 30"],["L","100% - 34","100% - 12"],["L","50% + 13","100% - 12"],["L","50% + 15","100% - 26"],["L","50% - 11","100% - 12"],["L","37","100% - 12"],["L","19","100% - 30"],["L","19","0% + 50.490196078431374%"],["L","10","0% + 48.529411764705884%"],["L","10","0% + 20.098039215686274%"],["L","0% + 19.000000000000004","0% + 18.38235294117647%"],["L","19","29"],["L","37","12"]]},{"show":true,"style":{"strokeWidth":"1","stroke":"var(--color-frame-2-stroke)","fill":"var(--color-frame-2-fill)"},"path":[["M","50% + 10","15"],["L","50% + 19","15"],["L","50% + 24","0% + 20"],["L","50% + 16","0% + 20"],["L","50% + 10","15"]]},{"show":true,"style":{"strokeWidth":"1","stroke":"var(--color-frame-3-stroke)","fill":"var(--color-frame-3-fill)"},"path":[["M","50% + 25","15"],["L","50% + 34","15"],["L","50% + 40","0% + 21"],["L","50% + 31","0% + 21"],["L","50% + 25","15"]]},{"show":true,"style":{"strokeWidth":"1","stroke":"var(--color-frame-4-stroke)","fill":"var(--color-frame-4-fill)"},"path":[["M","50% + 40","15"],["L","50% + 52","15"],["L","50% + 61","0% + 23"],["L","50% + 49","0% + 23"],["L","50% + 40","15"]]},{"show":true,"style":{"strokeWidth":"1","stroke":"var(--color-frame-5-stroke)","fill":"var(--color-frame-5-fill)"},"path":[["M","36","3"],["L","0% + 58","0"],["L","0% + 84","0% + 40"],["L","81","0% + 0"],["L","50% - 1","4"],["L","50% + 5","6"],["L","50% + 54","7"],["L","50% + 74","23"],["L","100% - 32","21"],["L","100% - 8","42"],["L","100% - 9","100% - 52.450980392156865%"],["L","100% + 0","100% - 50.245098039215684%"],["L","100% + 0","100% - 15.196078431372548%"],["L","100% - 7","100% - 13.480392156862745%"],["L","100% - 7","100% - 27"],["L","100% - 29","100% - 3"],["L","50% + 14","100% + 0"],["L","50% + 21","100% - 31"],["L","50% - 13","100% + 0"],["L","37","100% - 4"],["L","11","100% - 28"],["L","10","0% + 55.3921568627451%"],["L","0","0% + 52.94117658823523%"],["L","1","0% + 18.627450980392158%"],["L","11","0% + 16.666666666666668%"],["L","11","25"],["L","36","3"]]}]'
          )}
        /> 
        <div className="min-h-screen flex flex-col items-center justify-center p-4">
      {/* Connection Status Indicator */}
      <div className="flex flex-col items-center mb-8">
        <div className={`w-16 h-16 rounded-full flex items-center justify-center mb-2 ${dcOpen ? 'bg-green-500/20 border-green-500' : 'bg-red-500/20 border-red-500'} animate-pulse`}>
          <FiWifi className={`text-3xl ${dcOpen ? 'text-green-500' : 'text-red-500'}`} />
        </div>
        <p className={`${dcOpen ? 'text-green-500' : 'text-red-500'} font-medium`}>
          {dcOpen ? "Connected — waiting for files" : "Awaiting sender's Files...."}
        </p>
      </div>

      {/* Connection Info */}
      <div className="text-center text-xs text-gray-400">
        <p>Secure connection established</p>
        <p className="mt-1">Data transfer protocol: Quantum-Encrypted</p>
      </div>
    </div>
      </div>
    </div>
  );
}
